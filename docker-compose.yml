services:
  postgres:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: tilak
      POSTGRES_PASSWORD: tilak
      PGDATA: /data/postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      microserices-net:
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "tilak" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s


  pgadmin:
    container_name: ms_pgadmin
    image: elestio/pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@email.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-your-password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
     - "5050:80"
    volumes:
        - ./servers.json:/pgadmin4/servers.json
    networks:
      microserices-net:

  mongo:
    container_name: ms_mongo_db
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example


  mongo-express:
    container_name: ms_mongo_express
    image: mongo-express
    ports:
      - "8081:8081"
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
    depends_on:
      - mongo

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      microserices-net:


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    networks:
      microserices-net:

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      microserices-net:

  config-server:
    container_name: config-container
    image: config-server
    ports:
      - 8888:8888
    networks:
      microserices-net:
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/application/default" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s


  product:
    container_name: product-container
    image: product
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - 8050:8050
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888/
      - SPRING_DATASOURCE_URL= jdbc:postgresql://postgres:5432/product
    networks:
      microserices-net:

  discovery:
    container_name: discovery-container
    image: discovery
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - 8761:8761
    networks:
      microserices-net:
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

networks:
  microserices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongo:
